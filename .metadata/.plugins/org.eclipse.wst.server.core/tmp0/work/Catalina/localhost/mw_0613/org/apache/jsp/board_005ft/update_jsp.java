/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.1
 * Generated at: 2022-06-17 02:51:50 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board_005ft;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class update_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("\r\n");

    // 하나의 레코드를 읽어와서 아래의 폼에 넣어준다..
    // DB연결
    Class.forName("com.mysql.jdbc.Driver");
    String db="jdbc:mysql://localhost:3306/first";
    Connection conn=DriverManager.getConnection(db,"root","1234");
  
    // request
    String id=request.getParameter("id");
    
    // 쿼리 생성
    String sql="select * from board2 where id=?";
    
    // 심부름꾼 생성
    PreparedStatement pstmt=conn.prepareStatement(sql);
    pstmt.setString(1, id);
    
    // 쿼리 실행 => ResultSet
    ResultSet rs=pstmt.executeQuery();
    rs.next();
    // 폼에 출력

      out.write("\r\n");
      out.write(" <script>\r\n");
      out.write("   function init()\r\n");
      out.write("   {\r\n");
      out.write("\t   // radio\r\n");
      out.write("\t   document.pkc.area[");
      out.print(rs.getInt("area"));
      out.write("].checked=true;\r\n");
      out.write("\t   // checkbox\r\n");
      out.write("\t   //if(");
      out.print(rs.getInt("bimil"));
      out.write("==1) \r\n");
      out.write("\t   //   document.pkc.bimil.checked=true;\r\n");
      out.write("\t   \r\n");
      out.write("\t   ");
 // 값 자체를 출력안되게 하고자 할때
	    if(rs.getInt("bimil")==1)
	    {
	   
      out.write("\r\n");
      out.write("\t      document.pkc.bimil.checked=true;\r\n");
      out.write("\t   ");

	    }
	   
      out.write("\r\n");
      out.write("\t   \r\n");
      out.write("\t   ");

	     if(request.getParameter("chk")!=null) // update_ok에서 이동시 chk값이 존재한다..
	     {
	   
      out.write("\r\n");
      out.write("\t       alert(\"비밀번호가 틀립니다\");\r\n");
      out.write("\t   ");

	     }
	   
      out.write("\r\n");
      out.write("   }\r\n");
      out.write("  \r\n");
      out.write(" </script>\r\n");
      out.write(" <body onload=\"init()\">  <!-- board2/update.jsp -->\r\n");
      out.write(" <form name=\"pkc\" method=\"post\" action=\"update_ok.jsp\">\r\n");
      out.write("  <input type=\"hidden\" name=\"id\" value=\"");
      out.print(id);
      out.write("\">\r\n");
      out.write("  <table width=\"500\" border=\"0\" align=\"center\">\r\n");
      out.write("    <caption><h2>게시판 글쓰기</h2></caption>\r\n");
      out.write("    <tr>\r\n");
      out.write("      <td> 제 목 </td>\r\n");
      out.write("      <td> <input type=\"text\" name=\"title\" size=\"40\" value=\"");
      out.print(rs.getString("title"));
      out.write("\"> </td>\r\n");
      out.write("    </tr>\r\n");
      out.write("    <tr>\r\n");
      out.write("      <td> 이 름 </td>\r\n");
      out.write("      <td> <input type=\"text\" name=\"name\" size=\"6\" value=\"");
      out.print(rs.getString("name"));
      out.write("\"> </td>\r\n");
      out.write("    </tr>\r\n");
      out.write("    <tr>\r\n");
      out.write("      <td> 내 용 </td>\r\n");
      out.write("      <td> <textarea cols=\"40\" rows=\"5\" name=\"content\">");
      out.print(rs.getString("content"));
      out.write("</textarea> </td>\r\n");
      out.write("    </tr>\r\n");
      out.write("    <tr>\r\n");
      out.write("      <td> 비 번 </td>\r\n");
      out.write("      <td> <input type=\"password\" name=\"pwd\"> </td>\r\n");
      out.write("    </tr>\r\n");
      out.write("    <tr>\r\n");
      out.write("      <td> 지 역 </td>\r\n");
      out.write("      <td> <!-- DB에  0~4까지의 값이 저장되어 있다.. rs.getString(\"area\")의 값에 따라 다르게 체크-->\r\n");
      out.write("         <input type=\"radio\" name=\"area\" value=\"0\">서울\r\n");
      out.write("         <input type=\"radio\" name=\"area\" value=\"1\">경기\r\n");
      out.write("         <input type=\"radio\" name=\"area\" value=\"2\">강원\r\n");
      out.write("         <input type=\"radio\" name=\"area\" value=\"3\">충청\r\n");
      out.write("         <input type=\"radio\" name=\"area\" value=\"4\">전라\r\n");
      out.write("      </td>\r\n");
      out.write("    </tr>\r\n");
      out.write("    <tr>\r\n");
      out.write("      <td colspan=\"2\">\r\n");
      out.write("        <input type=\"checkbox\" name=\"bimil\" value=\"1\">\r\n");
      out.write("        체크하시면 해당글은 비밀글이 됩니다.\r\n");
      out.write("      </td>\r\n");
      out.write("    </tr>\r\n");
      out.write("    <tr>\r\n");
      out.write("      <td colspan=\"2\" align=\"center\"> <input type=\"submit\" value=\"글쓰기\"> </td>\r\n");
      out.write("    </tr>\r\n");
      out.write("  </table>\r\n");
      out.write(" </form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");

   // close

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
