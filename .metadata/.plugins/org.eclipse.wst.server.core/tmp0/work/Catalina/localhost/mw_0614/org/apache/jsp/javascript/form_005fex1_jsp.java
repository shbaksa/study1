/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.1
 * Generated at: 2022-06-14 05:56:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.javascript;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class form_005fex1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("\tfunction cal()\r\n");
      out.write("\t{\r\n");
      out.write("\t\t// 국,영,수 값을 읽어오기\r\n");
      out.write("\t\t//alert(document.pkc.kor.value&document.pkc.eng.value) 곱하기는 정수로 안바꿔도 작동은 함 그래도 정수 값으로 바꾸고 계산하기\r\n");
      out.write("\t\tvar kor = parseInt(document.pkc.kor.value); // 폼에 있는 value는 무조건 문자\r\n");
      out.write("\t\tvar eng = Number(document.pkc.eng.value);\r\n");
      out.write("\t\tvar mat = eval(document.pkc.mat.value); // 많이 안씀\r\n");
      out.write("\t\t// 총점과 평균 구하기\r\n");
      out.write("\t\tvar tot = kor+eng+mat;\r\n");
      out.write("\t\tvar avg = tot/3;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 총점과 평균 폼태그에 값을 전달\r\n");
      out.write("\t\tdocument.pkc.tot.value=tot;\r\n");
      out.write("\t\tdocument.pkc.avg.value=avg;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body> <!-- 0614/form_ex1.jsp -->\r\n");
      out.write("\t<!-- 키보드로 입력한 폼태그의 내용을 가지고 처리 -->\r\n");
      out.write("\t<!-- 폼태그의 값들을 가지고 연산 -->\r\n");
      out.write("\t\r\n");
      out.write("\t<form name=\"pkc\">\r\n");
      out.write("\t\t국어 : <input type=\"text\" name=\"kor\" size=\"3\"> \r\n");
      out.write("\t\t영어 : <input type=\"text\" name=\"eng\" size=\"3\"> \r\n");
      out.write("\t\t수학 : <input type=\"text\" name=\"mat\" size=\"3\"> \r\n");
      out.write("\t\t<input type=\"button\" value=\"계산하기\" onclick=\"cal()\">\r\n");
      out.write("\t\t총점 : <input type=\"text\" name=\"tot\" size=\"4\"> \r\n");
      out.write("\t\t평균 : <input type=\"text\" name=\"avg\" size=\"4\"> \r\n");
      out.write("\t</form>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<!-- 1. 국,영,수 점수 입력후 버튼이 클릭\r\n");
      out.write("\t- 버튼이 클릭되면 동작하는 함수가 필요 => function cal()\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\tcal()에서 실행되어야 될 내용\r\n");
      out.write("\t\r\n");
      out.write("\t- 값을 읽어온다\r\n");
      out.write("\t- 총점과 평균을 구한다\r\n");
      out.write("\t- 총점과 평균 폼태그에 값을 전달\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t-->");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
