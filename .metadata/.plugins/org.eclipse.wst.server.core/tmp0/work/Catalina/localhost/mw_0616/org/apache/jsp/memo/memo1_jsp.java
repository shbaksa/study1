/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.1
 * Generated at: 2022-06-16 08:15:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.memo;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class memo1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("   \t\r\n");
      out.write("   \t");

		
   		// DB연결
   		Class.forName("com.mysql.jdbc.Driver");
  	 	String db="jdbc:mysql://localhost:3306/first";
    	Connection conn=DriverManager.getConnection(db,"root","1234");
   		
   		// 쿼리생성
   		String sql = "select * from memo order by id desc";
   		
   		// 심부름꾼
   		PreparedStatement pstmt = conn.prepareStatement(sql);
   		
   		// 쿼리실행 => ResultSet
   		ResultSet rs = pstmt.executeQuery(); // executeUpdate() : 실행
   		

   	
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script>\r\n");
      out.write("\t\tfunction upmemo(id,name,content)\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\t// action에 문서를 수정해주는 문서로 변경\r\n");
      out.write("\t\t\tdocument.pkc.action=\"memo_update.jsp\";\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t// 수정시 필요한 id값을 form태그내에 추가\r\n");
      out.write("\t\t\tdocument.pkc.id.value=id;\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t// '글쓰기' 버튼의 글자를 '글수정'으로 바꾸기\r\n");
      out.write("\t\t\tdocument.pkc.submit.value=\"글수정\";\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t// 이름과 내용을 입력폼 안에 넣기\r\n");
      out.write("\t\t\tdocument.pkc.name.value=name;\r\n");
      out.write("\t\t\tdocument.pkc.content.value=content;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\t<!-- 0615/memo/memo.jsp -->\r\n");
      out.write("\r\n");
      out.write("\t<!-- 메모장 입력 폼 -->\r\n");
      out.write("\t<table width=\"550\" align=\"center\">\r\n");
      out.write("\t<form name=\"pkc\" method=\"post\" action=\"memo_ok.jsp\">\t\r\n");
      out.write("\t<input type=\"hidden\" name=\"id\">\r\n");
      out.write("\t<td> <input type=\"text\" name=\"name\" size=\"4\" placeholder=\"이름\"> </td>\r\n");
      out.write("\t<td> <input type=\"text\" name=\"content\" size=\"40\" placeholder=\"간단한 글을 올려주세요\"> </td>\r\n");
      out.write("\t<td> <input type=\"password\" name=\"pwd\" size=\"4\" placeholder=\"비밀번호\"> </td>\r\n");
      out.write("\t<td> <input type=\"submit\" name=\"submit\" value=\"저장\"> </td>\r\n");
      out.write("\t</form>\r\n");
      out.write("\t</table>\r\n");
      out.write("\t\r\n");
      out.write("\t<table width=\"550\" align=\"center\">\r\n");
      out.write("\t<!--  메모장 내용 출력부분 --> \r\n");
      out.write("\t");

		// ResultSet에 있는 내용 출력
		while(rs.next()) {
	
      out.write("\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t<td onclick=\"upmemo(");
      out.print(rs.getInt("id"));
      out.write(',');
      out.write('\'');
      out.print(rs.getString("name"));
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(rs.getString("content"));
      out.write("')\">");
      out.print(rs.getString("name") );
      out.write("</td>\r\n");
      out.write("\t<td>");
      out.print(rs.getString("content") );
      out.write("</td>\r\n");
      out.write("\t<td onclick=\"location=delete.jsp?id=");
      out.print(rs.getInt("id"));
      out.write('"');
      out.write(' ');
      out.write('>');
      out.print(rs.getString("writeday") );
      out.write("</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t");

		}
	
      out.write("\r\n");
      out.write("\t</table>\r\n");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("<!-- \r\n");
      out.write("\t현재문서(브라우저) \t\t\t\t\t=>  다른문서로 이동\r\n");
      out.write("\r\n");
      out.write("\ta태그 문서명?변수=값&변수=값\r\n");
      out.write("\tlocation 문서명?변수=값&변수=값  \t\t전달할 값이 존재\r\n");
      out.write("\tform태그 <input> 태그에 넣어서(value)\trequest.getParameter(\"변수\")\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\tselect 조회\r\n");
      out.write("\t\r\n");
      out.write("\t정렬\r\n");
      out.write("\t\r\n");
      out.write("\torder by 필드명 정렬방식    \r\n");
      out.write("\t\t\t\t  ( desc[내림차순], asc[오름차순] )\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\tmemo에서의 수정\r\n");
      out.write("\t1. 이름을 클릭하였을때 동작\r\n");
      out.write("\t2. 수정폼은 위에 존재하는 입력폼을 이용\r\n");
      out.write("\t  - action에 문서를 수정해주는 문서로 변경\r\n");
      out.write("\t  - 수정시 필요한 id값을 form태그내에 추가\r\n");
      out.write("\t  - '글쓰기' 버튼의 글자를 '글수정' 바꾸기\r\n");
      out.write("\t  - 이름과 내용을 입력폼 안에 넣기\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" -->");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
